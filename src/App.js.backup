// src/App.js
import React, { useState, useCallback, useRef, useEffect } from 'react';
import MonitoringTask from './MonitoringTask';
import CommunicationsTask from './CommunicationsTask';
import ResourceManagementTask from './ResourceManagementTask';
import TrackingTask from './TrackingTask';
import SystemHealth from './components/SystemHealth';
import EnhancedSidebar from './components/EnhancedSidebar';
import MainMenu from './components/MainMenu';
import NormalModeGame from './components/NormalModeGame';
import eventService from './services/EventService';
import './App.css';

function App() {
  // -------------------------
  // 1) STATE & HANDLERS
  // -------------------------

  // Main Menu state
  const [showMainMenu, setShowMainMenu] = useState(true);
  
  // Game mode state
  const [currentGameMode, setCurrentGameMode] = useState('testing');
  const [gameDuration, setGameDuration] = useState(5 * 60 * 1000); // 5 minutes default
  const [gameResults, setGameResults] = useState(null);

  // Monitoring Task controls
  const [monitoringEPM, setMonitoringEPM] = useState(3);
  const [showMonitoringLog, setShowMonitoringLog] = useState(false);

  // Communications Task controls
  const [commEPM, setCommEPM] = useState(2);
  const [showCommLog, setShowCommLog] = useState(false);
  const [isCommTaskEnabled, setIsCommTaskEnabled] = useState(true);

  // Sidebar control for All Logs
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [monitoringEventLog, setMonitoringEventLog] = useState([]);
  const [commEventLog, setCommEventLog] = useState([]);

  // Resource Management controls
  const [resourceEPM, setResourceEPM] = useState(2);
  const [resourceDifficulty, setResourceDifficulty] = useState(5);
  const [showResourceLog, setShowResourceLog] = useState(false);
  const [resourceEventLog, setResourceEventLog] = useState([]);

  // Tracking Task controls
  const [trackingEPM, setTrackingEPM] = useState(2);
  const [showTrackingLog, setShowTrackingLog] = useState(false);
  const [trackingEventLog, setTrackingEventLog] = useState([]);

  // Add tracking state if not already present
  const [isTrackingManual, setIsTrackingManual] = useState(false);
  const [isInBox, setIsInBox] = useState(false);

  // Add state for Resource Management task
  const [isResourceTaskEnabled, setIsResourceTaskEnabled] = useState(true);

  // Add new state for monitoring task enabled/disabled
  const [isMonitoringTaskEnabled, setIsMonitoringTaskEnabled] = useState(true);

  // Add new state for tracking task enabled/disabled
  const [isTrackingTaskEnabled, setIsTrackingTaskEnabled] = useState(true);

  // Add state for tracking difficulty
  const [trackingDifficulty, setTrackingDifficulty] = useState(5);

  // Add state for event sidebar
  const [isEventSidebarOpen, setIsEventSidebarOpen] = useState(false);

  // Add these state variables with the other state declarations at the top of the App component
  const [monitoringAutoEvents, setMonitoringAutoEvents] = useState(false);
  const [trackingAutoEvents, setTrackingAutoEvents] = useState(false);
  const [commAutoEvents, setCommAutoEvents] = useState(false);
  const [resourceAutoEvents, setResourceAutoEvents] = useState(false);

  // Add state for task difficulties
  const [commDifficulty, setCommDifficulty] = useState(5);
  const [monitoringDifficulty, setMonitoringDifficulty] = useState(5);

  // Health ref to track system health for scoring
  const systemHealthRef = useRef(100);

  // Custom handler to append Tracking logs
  const handleTrackingLogUpdate = useCallback((newEntry) => {
    setTrackingEventLog(prevLog => [...prevLog, newEntry]);
  }, []);

  // In the Communications Task render section:
  const [commMetrics, setCommMetrics] = useState({ healthImpact: 0, systemLoad: 0 });

  // Add refs at the top of App component
  const commTaskRef = useRef(null);
  const resourceTaskRef = useRef(null);

  // Add ref for monitoring task
  const monitoringTaskRef = useRef(null);

  // Add ref for tracking task
  const trackingTaskRef = useRef(null);

  // Add ref for SystemHealth component
  const systemHealthComponentRef = useRef(null);

  // -------------------------
  // 2) LAYOUT (MAIN + SIDEBAR)
  // -------------------------

  const [resourceMetrics, setResourceMetrics] = useState(ResourceManagementTask.getDefaultMetrics());

  // Add console log to verify metrics updates
  const handleResourceMetricsUpdate = (metrics) => {
    setResourceMetrics(metrics);
  };

  // Add state for monitoring metrics
  const [monitoringMetrics, setMonitoringMetrics] = useState({
    healthImpact: 0,
    systemLoad: 0
  });

  // Add with other state declarations (around line 20-30)
  const [trackingMetrics, setTrackingMetrics] = useState(TrackingTask.getDefaultMetrics());

  // Add a new state for task registration status
  const [tasksRegistered, setTasksRegistered] = useState(false);

  // Register task refs with the event service when they change
  useEffect(() => {
    // Don't try registering more than once if we've already succeeded
    if (tasksRegistered) return;
    
    // Skip registration if we're in the main menu
    if (showMainMenu) return;
    
    // Check if all refs have current values
    const allRefsAvailable = 
      commTaskRef?.current && 
      monitoringTaskRef?.current && 
      trackingTaskRef?.current && 
      resourceTaskRef?.current;
    
    if (allRefsAvailable) {
      console.log('All task refs are available, registering with EventService...');
      
      // Register the tasks
      const registrationSuccess = eventService.registerTasks(
        commTaskRef,
        monitoringTaskRef,
        trackingTaskRef,
        resourceTaskRef
      );
      
      // Update registration status
      setTasksRegistered(registrationSuccess);
      
      if (registrationSuccess) {
        console.log('All tasks successfully registered with event service');
      } else {
        console.warn('Task registration was not successful, some features may not work properly');
      }
    } else {
      // Log which refs are missing
      console.log('Not all task refs are available yet:', {
        commTask: !!commTaskRef?.current,
        monitoringTask: !!monitoringTaskRef?.current,
        trackingTask: !!trackingTaskRef?.current,
        resourceTask: !!resourceTaskRef?.current
      });
    }
  }, [
    commTaskRef?.current, 
    monitoringTaskRef?.current, 
    trackingTaskRef?.current, 
    resourceTaskRef?.current,
    showMainMenu,
    tasksRegistered
  ]);

  // Reset all tasks to default states
  const resetAllTasksToDefault = useCallback(() => {
    // Stop the event scheduler if running
    eventService.stopScheduler();
    
    // Reset task-specific states
    setCommEPM(2);
    setCommDifficulty(5);
    setMonitoringEPM(3);
    setMonitoringDifficulty(5);
    setTrackingEPM(2);
    setTrackingDifficulty(5);
    setResourceEPM(2);
    setResourceDifficulty(5);
    
    // Reset logs
    setMonitoringEventLog([]);
    setCommEventLog([]);
    setResourceEventLog([]);
    setTrackingEventLog([]);
    
    // Reset task enablement
    setIsCommTaskEnabled(true);
    setIsMonitoringTaskEnabled(true);
    setIsTrackingTaskEnabled(true);
    setIsResourceTaskEnabled(true);
    
    // Reset auto-events
    setMonitoringAutoEvents(false);
    setTrackingAutoEvents(false);
    setCommAutoEvents(false);
    setResourceAutoEvents(false);
    
    // Reset sidebars
    setIsSidebarOpen(false);
    setIsEventSidebarOpen(false);
    
    // Reset game mode state
    setGameResults(null);
  }, []);

  // Function to handle starting the game from the main menu
  const startGame = useCallback((options) => {
    // Get mode and duration from options
    const { mode, duration } = options;
    
    // Reset all tasks to their default states
    resetAllTasksToDefault();
    
    // Set game mode and duration
    setCurrentGameMode(mode);
    if (duration) setGameDuration(duration);
    
    // Hide the main menu
    setShowMainMenu(false);
    
    // Reset the task registration status so it will register again
    setTasksRegistered(false);
  }, [resetAllTasksToDefault]);

  // Function to handle exiting to the main menu
  const exitToMainMenu = useCallback(() => {
    // Stop the event scheduler
    eventService.stopScheduler();
    
    // Pause all tasks
    eventService.pauseAllTasks();
    
    // Show the main menu
    setShowMainMenu(true);
    
    // Reset task registration status
    setTasksRegistered(false);
  }, []);

  // Handle Normal Mode game end
  const handleGameEnd = useCallback((results) => {
    setGameResults(results);
    exitToMainMenu();
  }, [exitToMainMenu]);

  // Add keyboard shortcut (Ctrl+Q) to exit to main menu
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Ctrl+Q to exit to main menu
      if (e.ctrlKey && e.key === 'q') {
        e.preventDefault();
        exitToMainMenu();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [exitToMainMenu]);

  // Handle exiting the application (can't be fully implemented in a web app)
  const handleExitApp = () => {
    // In a web app, we can only show a confirmation or redirect
    if (window.confirm('Are you sure you want to exit the application? This will close the browser tab.')) {
      window.close(); // This may be blocked by browsers without user interaction
      // As a fallback, we can redirect to a blank page or show a message
      document.body.innerHTML = '<h1>Thanks for using MATB-II Simulation</h1><p>You can now close this tab.</p>';
    }
  };

  // If the main menu should be shown, render it instead of the main app
  if (showMainMenu) {
    return (
      <MainMenu 
        onStartGame={startGame} 
        onExitApp={handleExitApp}
        gameResults={gameResults}
      />
    );
  }

  return (
    <div className="app-container" style={{ height: '100vh', overflow: 'hidden' }}>
      <div className="main-container">
        {/* Only show sidebar in testing mode */}
        {currentGameMode === 'testing' && (
          <EnhancedSidebar 
            isSidebarOpen={isSidebarOpen}
            setIsSidebarOpen={setIsSidebarOpen}
            monitoringSettings={{
              eventsPerMinute: monitoringEPM,
              setEventsPerMinute: setMonitoringEPM,
              difficulty: monitoringDifficulty,
              setDifficulty: setMonitoringDifficulty,
              isEnabled: isMonitoringTaskEnabled,
              setIsEnabled: setIsMonitoringTaskEnabled,
              autoEvents: monitoringAutoEvents,
              setAutoEvents: setMonitoringAutoEvents
            }}
            commSettings={{
              eventsPerMinute: commEPM,
              setEventsPerMinute: setCommEPM,
              difficulty: commDifficulty,
              setDifficulty: setCommDifficulty,
              isEnabled: isCommTaskEnabled,
              setIsEnabled: setIsCommTaskEnabled,
              autoEvents: commAutoEvents,
              setAutoEvents: setCommAutoEvents
            }}
            trackingSettings={{
              eventsPerMinute: trackingEPM,
              setEventsPerMinute: setTrackingEPM,
              difficulty: trackingDifficulty,
              setDifficulty: setTrackingDifficulty,
              isEnabled: isTrackingTaskEnabled,
              setIsEnabled: setIsTrackingTaskEnabled,
              autoEvents: trackingAutoEvents,
              setAutoEvents: setTrackingAutoEvents
            }}
            resourceSettings={{
              eventsPerMinute: resourceEPM,
              setEventsPerMinute: setResourceEPM,
              difficulty: resourceDifficulty,
              setDifficulty: setResourceDifficulty,
              isEnabled: isResourceTaskEnabled,
              setIsEnabled: setIsResourceTaskEnabled,
              autoEvents: resourceAutoEvents,
              setAutoEvents: setResourceAutoEvents
            }}
            exitToMenu={exitToMainMenu}
            eventService={eventService}
            isEventSidebarOpen={isEventSidebarOpen}
            setIsEventSidebarOpen={setIsEventSidebarOpen}
          />
        )}

        {/* Normal Mode Game HUD */}
        {currentGameMode === 'normal' && (
          <NormalModeGame
            duration={gameDuration}
            onGameEnd={handleGameEnd}
            eventService={eventService}
            healthRef={systemHealthRef}
          />
        )}

        <div className={`main-content ${isSidebarOpen && currentGameMode === 'testing' ? 'sidebar-open' : ''} ${isEventSidebarOpen && currentGameMode === 'testing' ? 'event-sidebar-open' : ''}`}>
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column',
            height: '100%',
            position: 'relative'
          }}>
            {/* Rest of the main content (tasks) */}
            <div style={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
              <div style={{ flex: 1, overflow: 'auto', padding: '1rem' }}>
        <div style={{ 
          display: 'grid',
          gridTemplateColumns: 'repeat(6, 1fr)',
          gridTemplateRows: '1fr 1fr',
          gap: '1rem',
          height: '100vh',
          padding: '5%',
          boxSizing: 'border-box'
        }}>
          {/* Top Left - System Monitoring */}
          <div style={{ 
            gridColumn: '1 / span 2',
            gridRow: '1',
            border: '1px solid #ccc',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            {isMonitoringTaskEnabled ? (
              <MonitoringTask
                ref={monitoringTaskRef}
                eventsPerMinute={monitoringEPM}
                showLog={showMonitoringLog}
                onLogUpdate={setMonitoringEventLog}
                onMetricsUpdate={setMonitoringMetrics}
                isEnabled={isMonitoringTaskEnabled}
                autoEvents={monitoringAutoEvents}
              />
            ) : (
              <div style={{
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#f5f5f5',
                color: '#666'
              }}>
                System Monitoring Task Disabled
              </div>
            )}
          </div>

          {/* Top Middle - Tracking Task */}
          <div style={{ 
            gridColumn: '3 / span 3',
            gridRow: '1',
            border: '1px solid #ccc',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <TrackingTask
              ref={trackingTaskRef}
              eventsPerMinute={trackingEPM}
              difficulty={trackingDifficulty}
              showLog={showTrackingLog}
              onLogUpdate={handleTrackingLogUpdate}
              onStatusUpdate={({ isManual, isInBox }) => {
                setIsTrackingManual(isManual);
                setIsInBox(isInBox);
              }}
              onMetricsUpdate={setTrackingMetrics}
              isEnabled={isTrackingTaskEnabled}
              autoEvents={trackingAutoEvents}
            />
          </div>

          {/* Top Right - System Health */}
          <div style={{ 
            gridColumn: '6',
            gridRow: '1',
            border: '1px solid #ccc',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <SystemHealth
              ref={systemHealthComponentRef}
              monitoringLogs={monitoringEventLog}
              resourceLogs={resourceEventLog}
              commLogs={commEventLog}
              trackingLogs={trackingEventLog}
              isTrackingManual={isTrackingManual}
              isInBox={isInBox}
              commMetrics={commMetrics}
              resourceMetrics={resourceMetrics}
              monitoringMetrics={monitoringMetrics}
              trackingMetrics={trackingMetrics}
              healthRef={systemHealthRef}
            />
          </div>

          {/* Bottom Left - Communications Task */}
          <div style={{ 
            gridColumn: '1 / span 2',
            gridRow: '2',
            border: '1px solid #ccc',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            {isCommTaskEnabled ? (
              <CommunicationsTask
                ref={commTaskRef}
                eventsPerMinute={commEPM}
                showLog={showCommLog}
                onLogUpdate={setCommEventLog}
                onMetricsUpdate={setCommMetrics}
                autoEvents={commAutoEvents}
              />
            ) : (
              <div style={{
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#f5f5f5',
                color: '#666'
              }}>
                Communications Task Disabled
              </div>
            )}
          </div>

          {/* Resource Management */}
          <div style={{ 
            gridColumn: '3 / span 4',
            gridRow: '2',
            border: '1px solid #ccc',
            overflow: 'hidden'
          }}>
            <ResourceManagementTask
              ref={resourceTaskRef}
              eventsPerMinute={resourceEPM}
              difficulty={resourceDifficulty}
              showLog={showResourceLog}
              onLogUpdate={setResourceEventLog}
              onMetricsUpdate={handleResourceMetricsUpdate}
              isEnabled={isResourceTaskEnabled}
              autoEvents={resourceAutoEvents}
            />
          </div>
        </div>
              </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
